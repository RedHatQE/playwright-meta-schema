name: Linting, Testing, Building, Publishing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  lint-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run linting and formatting
        run: yarn lint

      - name: Build TypeScript
        run: yarn build

      - name: Check build artifacts
        run: ls -la dist/

      - name: Run tests with coverage
        run: yarn test:coverage

      - name: Generate coverage summary for PR
        if: github.event_name == 'pull_request'
        run: yarn coverage:summary

      - name: Check coverage thresholds
        run: yarn coverage:check

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            coverage/
            !coverage/.nyc_output/
          retention-days: 30

  publish:
    needs: lint-and-build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v') && github.ref == format('refs/tags/v{0}', github.event.head_commit.message)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build package
        run: yarn build

      - name: Verify package contents
        run: |
          echo "Package contents:"
          npm pack --dry-run

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Verify package.json version matches tag
        run: |
          TAG_VERSION=""

          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

          echo $(node -p "require('./package.json').version")

      - name: Publish to npm with provenance
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Installation

            ```bash
            npm install --dev playwright-meta-schema@${{ steps.version.outputs.version }}
            # or
            yarn add -D playwright-meta-schema@${{ steps.version.outputs.version }}
            ```
          draft: true
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
