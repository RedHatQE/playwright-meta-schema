name: Linting, Testing, Building, Publishing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

permissions:
  contents: read

jobs:
  lint-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run linting and formatting
        run: yarn lint

      - name: Build TypeScript
        run: yarn build

      - name: Check build artifacts
        run: ls -la dist/

      - name: Run tests with coverage
        run: yarn test:coverage

      - name: Generate coverage summary for PR
        if: github.event_name == 'pull_request'
        run: yarn coverage:summary

      - name: Check coverage thresholds
        run: yarn coverage:check

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            coverage/
            !coverage/.nyc_output/
          retention-days: 30

  publish:
    needs: lint-and-build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: write
      id-token: write  # Required for npm provenance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build package
        run: yarn build

      - name: Verify package contents
        run: |
          echo "Package contents:"
          npm pack --dry-run

      - name: Extract version from release tag
        id: version
        run: |
          # Extract version from the release tag (e.g., v1.0.0 -> 1.0.0)
          TAG_NAME="${{ github.event.release.tag_name }}"
          VERSION="${TAG_NAME#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION from tag: $TAG_NAME"

      - name: Update package.json version from tag
        run: |
          echo "Setting package.json version to ${{ steps.version.outputs.version }}"
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version
          echo "Updated version: $(node -p "require('./package.json').version")"

      - name: Publish to npm with provenance
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update release with npm package info
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const releaseId = ${{ github.event.release.id }};

            // Get current release body
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId
            });

            // Append npm installation info to the release body
            const npmInfo = `\n\n---\n\n## ðŸ“¦ Published to npm\n\nThis version has been published to npm and can be installed with:\n\n\`\`\`bash\nnpm install --save-dev playwright-meta-schema@${version}\n# or\nyarn add -D playwright-meta-schema@${version}\n\`\`\`\n\n[View on npm](https://www.npmjs.com/package/playwright-meta-schema/v/${version})`;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: release.body + npmInfo
            });
